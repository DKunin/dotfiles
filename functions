# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@"
}

# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt

extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}

function iseek() {
    cd $(ls -a -d */ .. | ipt)
    iseek
}

function nprun() {
  cat package.json | tr -d " \t\n\r" | egrep -o 'scripts\"\:\{(.*?)\}' | sed -e "s/scripts\"\://g" | sed -e "s/{//g" | egrep -o '\"(.*?):\"' | sed -e 's/\"//g' | sed -e 's/\://g' | sed -e 's/\,//g' | sort | ipt | xargs npm run
}

function installcask() {
    brew cask install "${@}" 2> /dev/null
}

function movtomp4() {
    ffmpeg -i $1 -vcodec h264 -acodec aac -strict -2 $2
}

function addlocalvar() {
    echo '\rexport '$1 >> ~/.localenv
}

function diskavailable() {
  df | grep $1 | awk '{print $5}'
}

function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function statsfor {
  git log --author="$1" --pretty=tformat: --numstat | awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END \
  { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }'
}
  
function updateSublimeSettings {
  ls $PROJECTS/dotfiles/sublime | while read line; do
    rm $HOME/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/$line
    ln -s $PROJECTS/dotfiles/sublime/$line $HOME/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/$line
  done
}
  

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

function getwebpagetitle() {
  wget -qO- $1 | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si'
}

function getciannumber() {
  wget -qO- $1 | perl -l -0777 -ne 'print $1 if /(tel:\d+)/'
}

transfer() { 
  if [ $# -eq 0 ]; then echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi 
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --uploae-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; }

gco() {
	git co $1 && comparemaster
}

cme() {
  comparemaster > /tmp/tempdiffwithmaster;
  cat /tmp/tempdiffwithmaster | grep .es6 | xargs ./node_modules/.bin/eslint;
  cat /tmp/tempdiffwithmaster | grep .js | xargs ./node_modules/.bin/eslint;
  cat /tmp/tempdiffwithmaster | grep .styl | xargs ./node_modules/.bin/jscs;
  cat /tmp/tempdiffwithmaster | grep .css | xargs ./node_modules/.bin/jscs;
}
